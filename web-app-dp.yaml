apiVersion: apps/v1
kind: Deployment
metadata:
  name: web-app-dp
spec:
  replicas: 3                 # базовое 
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 2             # макс. количество новых подов под апдейт
      maxUnavailable: 1       # макс. количество недоступных подов
  selector:
    matchLabels:
      app: web-app
  template:
    metadata:
      labels:
        app: web-app
    spec:
      # Ручная равномерная настройка топологии по зонам и нодам
      topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: topology.kubernetes.io/zone
        whenUnsatisfiable: DoNotSchedule
        labelSelector:
          matchLabels:
            app: web-app
      - maxSkew: 1
        topologyKey: kubernetes.io/hostname
        whenUnsatisfiable: DoNotSchedule
        labelSelector:
          matchLabels:
            app: web-app
      # Так как предполагаемая пиковая нагрузка может полностью быть покрытой 4 подами, а нод у нас больше (5) - affinity не будет использованно. TSC полнстью справляется 
      containers:
      - name: app
        image: web-app:latest
        resources:
          # для холодного старта , дальше для увеличения нагрузки со временем VPA скорректирует выделенные ресурсы и сэкономит их, но во временной перспективе!
          requests:
            memory: "128Mi"
            cpu: "200m"     
          limits:
            memory: "256Mi"
            cpu: "300m"

        # Спорные значения для периодов и количества попыток, ниже указаны "мягкие", по-моему мнению, пробы для http-сервиса 
        readinessProbe:
          httpGet:
            path: /healthcheck
            port: 8080
          initialDelaySeconds: 10  # Ждем полной инициализации
          periodSeconds: 5         # Период проверки
          failureThreshold: 3      # Количество возможных "неудачных" попыток 
          timeoutSeconds: 3        # Таймаут перед пробой

        livenessProbe:
          httpGet:
            path: /healthcheck
            port: 8080
          initialDelaySeconds: 30 
          periodSeconds: 10
          failureThreshold: 3      
          timeoutSeconds: 3

        startupProbe:
          httpGet:
            path: /healthcheck
            port: 8080
          failureThreshold: 30     
          periodSeconds: 5         
          timeoutSeconds: 3